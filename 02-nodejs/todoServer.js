/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const fs = require('fs');
const bodyParser = require('body-parser');

const app = express();
const port = 3000;

app.use(bodyParser.json());

// ************ File Parsing Class *************** //
// to fetch and save contents of the todo List in persistent memory file
class FileParser{

  constructor(filepath){
    this.filepath = filepath;
    this.fileContents = null;
    this._fetchContents();
  }

  _fetchContents(){
    this.fileContents = fs.readFileSync(this.filepath, "utf-8");
  }
  _saveContents(){
    fs.writeFileSync(this.filepath, this.fileContents);
  }

  writeContents(data){
    // data : It's going to be an object of ID and todo item/object with various properties (with ID being the key of the object).
    // we will be converting this array into a content string that can be saved to the file.
    let output = [];
    for (let id in data){
      let todoString = "id,"+id.toString();
      for (let prop in data[id]){
        todoString += `,${prop},${data[id][prop]}`;
      }
      todoString+='\n';
      output.push(todoString);
    }
    this.fileContents = output.join('');
    // console.log(this.fileContents,typeof this.fileContents);
    this._saveContents();
  }
  readContents(){
    let output = {};
    let contents = this.fileContents.split('\n');
    // console.log(contents);
    for (let line of contents){
      if (line.length > 0){
        line = line.trim();
        line = line.split(',');
        // console.log(line);
        let id = NaN;
        for (let i = 0; i < line.length; i+=2){
          if (i == 0){
            output[+line[i+1]] = {};
            id = +line[i+1];
          }
          else{
            output[id][line[i]] = line[i+1];
          }
        }
      }
    }
    return output;
  }
}

// -----------------------------------------Utility functions
function getIdCounter(todos){
  let ctr = 0;
  let keys = Object.keys(todos).map((id) => {return +id});
  if (keys.length > 0){
    ctr = Math.max(...keys);
  }
  return ctr;
}

let FILE = new FileParser("./todos.txt");
let TODOS = FILE.readContents();
let IDCTR = getIdCounter(TODOS);

// ------------------------------------------App handler functions
function retrieveTodos(req,res){
  let output = [];
  // console.log(IDCTR,TODOS);
  for (let id in TODOS){
    output.push(TODOS[id]);
  }
  res.status(200).json(output);
}

function retrieveTodosById(req,res){
  let id = req.params.id;
  // console.log(id,TODOS);
  if (id in TODOS){
    console.log(TODOS[id]);
    return res.status(200).json(TODOS[id]);
  }
  else res.status(404).send(`404 Not Foun.D.luffy the todo with ID : ${id}!`);
}

function addTodo(req,res){
  let todo = req.body;
  todo["id"] = ++IDCTR;
  TODOS[IDCTR] = todo;
  FILE.writeContents(TODOS);
  res.status(201).json({"id":IDCTR});
}

function updateTodo(req,res){
  let id = req.params.id;
  // console.log(id in TODOS);
  if (id in TODOS){
    let updateTodo = req.body;
    for (let prop in updateTodo){
      TODOS[id][prop] = updateTodo[prop];
    }
    FILE.writeContents(TODOS);
    res.status(200).send(`Updated Todo Item with ID : ${id}!`);
  }
  else res.status(404).send(`404 Not Found.D.Luffy the todo with ID : ${id}!`);
}

function deleteTodo(req,res){
  let id = req.params.id;
  // console.log(id,TODOS);
  if (id in TODOS){
    delete TODOS[id];
    FILE.writeContents(TODOS);
    res.status(200).send(`Deleted Todo Item with ID : ${id}!`);
  }
  else res.status(404).send(`404 Not Found.D.Luffy the todo with ID : ${id}!`);
}

// ----------------------------------------------------------------------App routes
app.get("/todos", retrieveTodos);
app.get("/todos/:id", retrieveTodosById);
app.post("/todos", addTodo);
app.put("/todos/:id", updateTodo);
app.delete("/todos/:id", deleteTodo);

// checking if the HTTP server is working on the given port or not
// app.listen(port, () => {
//   console.log(`Example app listening on port ${port}`)
// });
module.exports = app;
