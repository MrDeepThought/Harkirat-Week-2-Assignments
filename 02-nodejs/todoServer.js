/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const fs = require('fs');
const bodyParser = require('body-parser');

const app = express();
const port = 3000;
const listedRoutes = {

}
// middlewares for the app
// Function to check if a route exists in the Express app
function checkRouteExists(path, routes) {
  for (let i = 0; i < routes.length; i++) {
    const route = routes[i];
    if (route.route && route.route.path === path) {
      return true;
    }
  }
  return false;
}
app.use((req, res, next) => {
  // Check if the requested route exists
  const routeExists = checkRouteExists(req.path, app._router.stack);
  
  if (!routeExists) {
    // If route does not exist, send a 404 Not Found error
    return res.status(404).send('404 Not Foun.D.Luffy');
  }

  // If route exists, proceed to the next middleware
  next();
});
app.use(bodyParser.json());

// ************ File Parsing Class *************** //
// to fetch and save contents of the todo List in persistent memory file
class FileParser{

  constructor(filepath){
    this.filepath = filepath;
    this.fileContents = null;
    this._fetchContents();
  }

  _fetchContents(){
    this.fileContents = fs.readFileSync(this.filepath, "utf-8");
  }
  _saveContents(){
    fs.writeFileSync(this.fileContents);
  }
  _splitString(str){
    let index = str.indexOf(" ");
    return [str.substring(0,index),str.substring(index+1,str.length)];
  }

  writeContents(data){
    // data : It's going to be an object of ID and description of todos with ID being the key of the object.
    // we will be converting this array into a content string that can be saved to the file.
    let output = [];
    for (let id in data){
      output.push(id.toString() + ' ' + data[id] + '\n');
    }
    this.fileContents = output.join('');
  }
  readContents(){
    let output = {};
    let contents = this.fileContents.split('\n');
    for (let line of contents){
      if(line.length > 0){
        line = line.trim();
        let [id,desc] = this._splitString(line);
        output[id] = desc;
      }
    }
    return output;
  }
}

let FILE = new FileParser("./todos.txt");
let TODOS = FILE.readContents();

// app handler functions
function retrieveTodos(req,res){
  let output = [];
  for (let id in TODOS){
    output.push(TODOS[id]);
  }
  res.status(200).json(output);
}

// app routes
app.get("/todos", retrieveTodos);
// app.get("/todos/:id", retrieveTodosById);
// app.post("/todos", addTodo);
// app.put("/todos/:id", updateTodo);
// app.delete("/todos/:id", deleteTodo);

// checking if the HTTP server is working on the given port or not
app.listen(port, () => {
  console.log(`Example app listening on port ${port}`)
});
module.exports = app;
